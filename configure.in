#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.53])
AC_INIT([Gnometris], [2.26.3],
  [https://github.com/chenxiaolong/gnometris/issues],
  [gnometris])

AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_HEADERS([config.h])

AM_INIT_AUTOMAKE([1.9 no-dist-gzip dist-bzip2 foreign])

if test -z "$enable_maintainer_mode"; then
  enable_maintainer_mode=yes
fi
AM_MAINTAINER_MODE([enable])

# Feature matrix

need_cxx=yes
need_clutter=no
want_gstreamer=yes

# Locate various programs

PKG_PROG_PKG_CONFIG([0.15])

AC_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S
AC_PROG_SED

if test "$need_cxx" = "yes"; then
  AC_PROG_CXX

  # Check whether a C++ was found (AC_PROG_CXX sets $CXX to "g++" even when it
  # doesn't exist)
  AC_LANG_PUSH([C++])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[])],[],[AC_MSG_ERROR([No C++ compiler found])])
  AC_LANG_POP([C++])
fi

AM_PROG_CC_C_O

AC_PROG_LIBTOOL

GNOME_COMMON_INIT
GNOME_DEBUG_CHECK
GNOME_COMPILE_WARNINGS([maximum])
GNOME_CXX_WARNINGS([yes])
GNOME_MAINTAINER_MODE_DEFINES

AC_C99_VARIADIC_MACROS
AC_C99_VARIABLE_ARRAYS
AC_C99_INITIALIZERS
AC_C99_STDINT_H   

# *************
# Documentation
# *************

GNOME_DOC_INIT([0.10.0],[have_gdu=yes],[have_gdu=no])

# ************
# Dependencies
# ************

# Sound

if test "$want_gstreamer" = "yes"; then
  AC_MSG_CHECKING([whether to enable sound support])
  AC_ARG_ENABLE([sound],
    [AS_HELP_STRING([--enable-sound],[Enable sound with GStreamer or SDL_Mixer.])],
    [],[enable_sound=yes])
  AC_MSG_RESULT([$enable_sound])
else
  enable_sound=no
fi

# Check which sound library to use

AC_MSG_CHECKING([for which sound library to use])
AC_ARG_WITH([sound],
  [AS_HELP_STRING([--with-sound=gstreamer|sdl_mixer (default: sdl_mixer)])],
  [with_sound="$withval"],
  [with_sound=sdl_mixer])
AC_MSG_RESULT([$with_sound])

# Clutter
  
AC_MSG_CHECKING([whether to enable clutter support])
AC_ARG_ENABLE([clutter],
  [AS_HELP_STRING([--enable-clutter],[whether to enable clutter support (default: disabled)])],
  [],[enable_clutter=no])
AC_MSG_RESULT([$enable_clutter])

# Gameplay documentation

AC_MSG_CHECKING([whether to build gameplay documentation])
AC_ARG_ENABLE([gameplaydoc],
  [AS_HELP_STRING([--enable-gameplaydoc],[whether to build gameplay documentation (default: enabled)])],
  [],[enable_gameplaydoc=yes])
AC_MSG_RESULT([$enable_gameplaydoc])


# ********************
# Checks for libraries
# ********************

GTK_REQUIRED=2.14.0

CAIRO_REQUIRED=1.0
GSTREAMER_REQUIRED=0.10.11

# Check for common modules

need_gthread=no
PKG_CHECK_MODULES([GTHREAD],[gthread-2.0])
AC_SUBST([GTHREAD_CFLAGS])
AC_SUBST([GTHREAD_LIBS])

PKG_CHECK_MODULES([GTK],[gtk+-2.0 >= $GTK_REQUIRED])
AC_SUBST([GTK_CFLAGS])
AC_SUBST([GTK_LIBS])

# Check for Clutter

if test "$enable_clutter" = "yes"; then
  CLUTTER_API_VERSION=
  AC_MSG_CHECKING([for clutter API version])
  for API_VERSION in 0.8; do
    PKG_CHECK_EXISTS([clutter-$API_VERSION clutter-cairo-$API_VERSION],
      [CLUTTER_API_VERSION=$API_VERSION; break],[])
  done
  if test -z "$CLUTTER_API_VERSION"; then
    AC_MSG_ERROR([no clutter found])
  fi
  AC_MSG_RESULT([$CLUTTER_API_VERSION])

  CLUTTER_REQUIRED=0.8.8
  CLUTTER_GTK_REQUIRED=0.8.3
  CLUTTER_CAIRO_REQUIRED=0.8.2

  PKG_CHECK_MODULES([CLUTTER],[
    clutter-$CLUTTER_API_VERSION >= $CLUTTER_REQUIRED
    clutter-cairo-$CLUTTER_API_VERSION >= $CLUTTER_CAIRO_REQUIRED])
  AC_SUBST([CLUTTER_CFLAGS])
  AC_SUBST([CLUTTER_LIBS])

  PKG_CHECK_MODULES([CLUTTER_GTK],[
    clutter-gtk-$CLUTTER_API_VERSION  >= $CLUTTER_GTK_REQUIRED])
  AC_SUBST([CLUTTER_GTK_CFLAGS])
  AC_SUBST([CLUTTER_GTK_LIBS])
fi

AM_CONDITIONAL([HAVE_CLUTTER],[test "$enable_clutter" = "yes"])

# Gameplay documentation

if test "$enable_gameplaydoc" = "yes"; then
  AC_DEFINE([WITH_GAMEPLAYDOC],[1],[Define if gameplay docs should be built])
fi

AM_CONDITIONAL([WITH_GAMEPLAYDOC],[test "$enable_gameplaydoc" = "yes"])

# GThread

AM_CONDITIONAL([WITH_GTHREAD],[test "$need_gthread" = "yes"])

# Sound support: GStreamer and SDL_mixer
have_gstreamer=no
if test "$enable_sound" = "yes" -a "$with_sound" = "sdl_mixer"; then
  # Check for SDL_Mixer sound support, sets SDL_MIXER_CFLAGS, SDL_MIXER_LIBS, AUDIO_SDL
  GAMES_CHECK_SOUND()

  if test "$SDL_mixer" = "no"; then
    with_sound=gstreamer
    echo "SDL_Mixer not found, fallback to GStreamer."
  fi

fi

if test "$enable_sound" = "yes" -a "$with_sound" = "gstreamer"; then
  # Check for GStreamer 
  PKG_CHECK_MODULES([GSTREAMER],
    [gstreamer-0.10 >= $GSTREAMER_REQUIRED],
    [have_gstreamer=yes],[have_gstreamer=no])
    # SDL_mixer is default, while GStreamer is a required dependency if SDL_mixer isn't found.
    if test "$enable_sound" = "yes" -a "$have_gstreamer" = "no" -a "$SDL_mixer" = "no"; then
      AC_MSG_ERROR([Sound enabled but GStreamer or SDL_Mixer not found])
    fi
fi

if test "$have_gstreamer" = "yes"; then
  AC_SUBST([GSTREAMER_CFLAGS])
  AC_SUBST([GSTREAMER_LIBS])

  AC_DEFINE([HAVE_GSTREAMER],[1],[Define if GStreamer is available])
fi

if test "x$SDL_mixer" = "xyes"; then
  AC_SUBST(SDL_MIXER_CFLAGS)
  AC_SUBST(SDL_MIXER_LIBS)

  AC_DEFINE([HAVE_SDL_MIXER],[1],[Define if SDL_Mixer is available])
fi

AM_CONDITIONAL([HAVE_GSTREAMER],[test "$have_gstreamer" = "yes"])
AM_CONDITIONAL([HAVE_SDL_MIXER],[test "x$SDL_mixer" = "xyes"])
AM_CONDITIONAL([ENABLE_SOUND],[test "$enable_sound" = "yes"])

# *************

AC_PATH_PROG([GLIB_GENMARSHAL],[glib-genmarshal])

GLIB_GENMARSHAL_INTERNAL="--internal"
AC_SUBST([GLIB_GENMARSHAL_INTERNAL])

# ********

AM_CFLAGS="$AM_CFLAGS $WARN_CFLAGS"
AM_CXXFLAGS="$AM_CXXFLAGS $WARN_CXXFLAGS"

# ****
# i18n
# ****

GETTEXT_PACKAGE=gnometris
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [The gettext package name])
AM_GLIB_GNU_GETTEXT

IT_PROG_INTLTOOL([0.35.0])

# ********************
# Game specific checks
# ********************

# Check for library functions
# ===========================

AC_CHECK_FUNCS([dup2 strcasecmp strchr strerror \
                malloc vprintf], [],
               [AC_MSG_ERROR([cannot find required function])])
AC_CHECK_FUNCS([fork select]) 
AC_CHECK_FUNCS([alarm getpwuid getenv setenv close hstrerror kill socketpair])

AC_FUNC_SELECT_ARGTYPES

AC_HEADER_STDC

AC_TYPE_SIGNAL
AC_FUNC_FORK
AC_FUNC_STRCOLL
AC_FUNC_VPRINTF

# Check for PF_LOCAL/PF_UNIX
# ==========================
# There should be an autoconf macro to check this???
#
# Not having this is not necessarily a fatal error.  It should mean that
# the WinAPI interface is used instead.
AC_MSG_CHECKING([for PF_LOCAL])
AC_EGREP_CPP(PF_LOCAL,
             [#include <sys/types.h>
              #include <sys/socket.h>
              PF_LOCAL ],
             [AC_MSG_RESULT(no)
              AC_MSG_CHECKING([for PF_UNIX])
              AC_EGREP_CPP(PF_UNIX, [ #include <sys/types.h>
                                      #include <sys/socket.h>
				      PF_UNIX ],
                           [AC_MSG_RESULT(no)],
                           [AC_MSG_RESULT(yes)
                            AC_DEFINE([PF_LOCAL], PF_UNIX,
				      [PF_UNIX is available])
			    AC_DEFINE([AF_LOCAL], AF_UNIX,
				      [AF_UNIX is available])])], 
             AC_MSG_RESULT(yes))

# Check for header files
# ======================
AC_CHECK_HEADERS([fcntl.h limits.h sys/time.h time.h \
                  unistd.h], [],
                 [AC_MSG_ERROR([cannot find required header file])])
AC_CHECK_HEADERS([netdb.h sys/socket.h winsock2.h])
AC_HEADER_SYS_WAIT


# Checks for typedefs, structures, and compiler characteristics
AC_C_CONST
AC_C_VOLATILE
AC_FUNC_REALLOC
AC_HEADER_STDBOOL
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME

# *************
# setgid checks
# *************

AC_ARG_ENABLE([setgid],
  [AS_HELP_STRING([--disable-setgid],
    [Disable the use of setgid binaries])],
  [case "${enableval}" in
    yes) setgid=true ;;
    no)  setgid=false ;;
    *) AC_MSG_ERROR([bad value ${enableval} for --disable-setgid]) ;;
   esac],[setgid=true])
AC_SUBST(setgid)

AC_ARG_WITH(scores-group,
  AC_HELP_STRING([--with-scores-group=group],
    [Group for the high score tables and binaries]),
  scores_group="$withval",scores_group="games")
AC_SUBST(scores_group)
AC_ARG_WITH(scores-user,
  AC_HELP_STRING([--with-scores-user=user],
    [User for the high score tables]),
  scores_user="$withval",scores_user="games")
AC_SUBST(scores_user)

scoredir='${localstatedir}/games'
AC_SUBST(scoredir)

##############################################

AC_SUBST([AM_CPPFLAGS])
AC_SUBST([AM_CFLAGS])
AC_SUBST([AM_CXXFLAGS])
AC_SUBST([AM_LDFLAGS])

##############################################
##############################################

AC_CONFIG_FILES([
Makefile
po/Makefile.in
icons/Makefile
sounds/Makefile
libgames-support/Makefile
gnometris/Makefile
gnometris/pix/Makefile
gnometris/help/Makefile
gnometris/gnometris.desktop.in
])
AC_OUTPUT

echo "
Configuration:

    Source code location:  ${srcdir}
    Compiler:              ${CC}

    Using Clutter:         ${enable_clutter}
    Sound support:         ${with_sound}
    Enable gameplay docs:  ${enable_gameplaydoc}
    Use setgid binaries:   ${setgid}
    Scores user:           ${scores_user}
    Scores & setgid group: ${scores_group}
"

if grep "$scores_group:" /etc/group > /dev/null; then
:;
else
echo
echo "Warning: The $scores_group group does not exist. Installation will"
echo "         succeed, but high score logging will not work. To specify a"
echo "         different group use the --with-scores-group option."
echo
fi

